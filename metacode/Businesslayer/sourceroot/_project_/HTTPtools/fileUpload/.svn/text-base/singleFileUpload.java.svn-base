package HTTPtools.fileUpload;

/**
 * <p>Title: </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: </p>
 * @author unascribed
 * @version 1.0
 */

import general.log.MatecLog;

import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.HashMap;

import javax.servlet.ServletInputStream;
import javax.servlet.http.HttpServletRequest;

public class singleFileUpload {

  private HashMap formdata = new HashMap();
  private ByteArrayOutputStream fileData = new ByteArrayOutputStream(8164);
  private String accept = null;
  private String referer = null;
  private String accept_language = null;
  private String content_type = null;
  private String accept_encoding = null;
  private String user_agent = null;
  private String host = null;
  private String content_length = null;
  private String connection = null;
  private String cache_control = null;
  private String ContextPath = null;
  private String boundary = null;
  private String Content_Disposition = null;
  private String name = null;
  private String filename = "";
  private String filecontent = null;
  private String[] header_line = new String[3];
  private MatecLog log;
  
  public singleFileUpload(HttpServletRequest request) throws IOException {
	MatecLog log = new MatecLog(this);
    //Get properties from request header
    accept = request.getHeader("accept");
    referer = request.getHeader("referer");
    accept_language = request.getHeader("accept-language");
    content_type = request.getHeader("content-type");
    if(request.getContentType().length() > content_type.length()) {
      content_type = request.getContentType();
    }
    accept_encoding = request.getHeader("accept-encoding");
    user_agent = request.getHeader("user-agent");
    host = request.getHeader("host");
    content_length = request.getHeader("content-length");
    connection = request.getHeader("connection");
    cache_control = request.getHeader("cache-control");
    ContextPath = request.getContextPath();
    boundary = content_type.substring(content_type.indexOf("boundary=") + 9);

    //Get properties & file data from the inputstream
      ServletInputStream servletData = request.getInputStream();
      byte[] b = new byte[8164];
      int len=0;
      String line;
      //First line = boundary
      len = servletData.readLine(b, 0, b.length);
      line = new String(b, 0, len, "ISO-8859-1");
      header_line[0] = line;
      //Second line: Content-Disposition, name, filename
      //if there's other form data, repeat until the file is found
      do {
          len = servletData.readLine(b, 0, b.length);
          line = new String(b, 0, len, "ISO-8859-1");
        if(line.indexOf("Content-Disposition: form-data; name=\"")!=-1) {
        	if(line.indexOf("filename=\"")==-1) {
        		//form data found, store in HashMap
        		String dataname = line.substring(line.indexOf("name=\"") + 6);
        		dataname = dataname.substring(0, dataname.indexOf("\""));
        		//read empty line
        		len = servletData.readLine(b, 0, b.length);
                line = new String(b, 0, len, "ISO-8859-1");
                //read first line
                len = servletData.readLine(b, 0, b.length);
                line = new String(b, 0, len, "ISO-8859-1");
            	String value = "";
                while(line.indexOf(boundary)==-1) {
                	//cut away the last return character
                	value += line.substring(0, line.length() - 2);
                	len = servletData.readLine(b, 0, b.length);
                    line = new String(b, 0, len, "ISO-8859-1");
                }
                formdata.put(dataname, value);
        	}
        }
      } while(line.indexOf("filename=\"")==-1);
      header_line[1] = line;
      Content_Disposition = line.substring(line.indexOf("Content-Disposition:") + 21, line.indexOf("name=")).trim();
      name = line.substring(line.indexOf("name=\"") + 6, line.indexOf("filename=\""));
      name = name.substring(0, name.indexOf("\""));
      filename = line.substring(line.indexOf("filename=\"") + 10);
      filename = filename.substring(0, filename.indexOf("\""));
      //Third line: Content-Type
      len = servletData.readLine(b, 0, b.length);
      line = new String(b, 0, len, "ISO-8859-1");
      header_line[2] = line;
      filecontent = line.substring(line.indexOf("Content-Type:") + 14);
      filecontent = filecontent.substring(0, filecontent.length() - 2).trim();
      //Forth line: empty line
      len = servletData.readLine(b, 0, b.length);
      //Begin of fileData
      boolean boundaryFound = false;
      while( ((len = servletData.readLine(b, 0, b.length)) != -1) && !boundaryFound ) {
        line = new String(b, 0, len, "ISO-8859-1");
        if(!(line.indexOf(boundary)>-1)) {
          fileData.write(b, 0, len);
        } else {
          boundaryFound = true;
        }
      }
      servletData.close();
      Enumeration e = request.getAttributeNames();
      //for (Enumeration e = request.getAttributeNames() ; e.hasMoreElements() ;) {
      //}
  }

  public boolean saveFile(String dir) throws IOException {
    return saveFileAs(dir, this.getFilename());
  }

  public boolean saveFileAs(String dir, String filename) throws IOException {
    boolean result = false;
    File destination = new File(dir);
    if(!destination.exists()) destination.mkdirs();
    FilterOutputStream fileOutputStream = null;
    byte[] b = fileData.toByteArray();
    try {
      File f = new File(dir + filename);
      fileOutputStream = new BufferedOutputStream(new FileOutputStream(f), 8 * 1024);
      fileOutputStream.write(b, 0, b.length - 2);
      fileOutputStream.flush();
      fileOutputStream.close();
    }
    finally {
        result = true;    	
    }
    return result;
  }

  public String getParameter(String parameter) {
	  String returnvalue = (String)formdata.get(parameter);
	  if(returnvalue!=null)
		  if(returnvalue.trim().equals("")) returnvalue = null;
	  return returnvalue;
  }
  
  public String getaccept() {
    return accept;
  }

  public String getreferer() {
    return referer;
  }

  public String getaccept_language() {
    return accept_language;
  }

  public String getcontent_type() {
    return content_type;
  }

  public String getaccept_encoding() {
    return accept_encoding;
  }

  public String getuser_agent() {
    return user_agent;
  }

  public String gethost() {
    return host;
  }

  public String getcontent_length() {
    return content_length;
  }

  public String getconnection() {
    return connection;
  }

  public String getcache_control() {
    return cache_control;
  }

  public String getContextPath() {
    return ContextPath;
  }

  public String getboundary() {
    return boundary;
  }

  public String getContent_Disposition() {
    return Content_Disposition;
  }

  public String getname() {
    return name;
  }

  public String getHeader_Line(int line) {
    return header_line[line];
  }

  public String getfilecontent() {
    return filecontent;
  }

  public String getfullFilename() {
    return filename;
  }

  public String getFilename() {
    return filename.substring(filename.lastIndexOf("\\") + 1);
  }

  public String getDirname() {
    return filename.substring(0, filename.lastIndexOf("\\"));
  }
}